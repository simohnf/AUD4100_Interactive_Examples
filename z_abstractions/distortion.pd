#N canvas 579 238 1036 545 12;
#X text 130 382 Press & hold the SPACEBAR to trigger the note;
#X obj 83 22 cnv 15 450 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 495 80 773 350 guts 0;
#X obj 104 139 r \$1-note;
#X obj 104 186 line~;
#X obj 90 215 *~;
#X obj 56 294 throw~ \$1-outL;
#X obj 169 295 throw~ \$1-outR;
#X msg 104 162 \$1 25;
#N canvas 529 546 849 405 display 0;
#X obj 309 88 sel 0 1;
#X obj 309 64 > 0;
#X msg 280 124 color 1 0 22;
#X msg 378 123 color 1 13 22;
#X obj 310 38 r \$1-note;
#X obj 398 33 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 142 251 s \$0-type_rec;
#X obj 257 249 s \$0-gain_rec;
#X obj 363 250 s \$0-tone_rec;
#X obj 471 252 s \$0-vol_rec;
#X connect 0 0 2 0;
#X connect 0 1 3 0;
#X connect 1 0 0 0;
#X connect 2 0 6 0;
#X connect 2 0 7 0;
#X connect 2 0 8 0;
#X connect 2 0 9 0;
#X connect 3 0 6 0;
#X connect 3 0 7 0;
#X connect 3 0 8 0;
#X connect 3 0 9 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X restore 484 60 pd display;
#N canvas 969 192 512 300 load 0;
#X obj 214 9 r reset;
#X obj 31 91 s \$0-type_rec;
#X msg 31 67 1;
#X obj 140 89 s \$0-gain_rec;
#X msg 140 65 4;
#X obj 244 86 s \$0-tone_rec;
#X msg 243 62 2000;
#X obj 345 86 s \$0-vol_rec;
#X msg 337 42 1;
#X connect 0 0 2 0;
#X connect 0 0 4 0;
#X connect 0 0 6 0;
#X connect 0 0 8 0;
#X connect 2 0 1 0;
#X connect 4 0 3 0;
#X connect 6 0 5 0;
#X connect 8 0 7 0;
#X restore 322 59 pd load;
#N canvas 199 23 419 220 sampler 0;
#X obj 110 128 outlet~;
#N canvas 0 23 450 300 sampPlayer 0;
#X obj 29 38 r \$0-pbRate;
#X obj 29 62 phasor~;
#X obj 29 86 *~, f 12;
#X obj 29 110 +~ 1;
#X obj 29 134 tabread4~ \$0-sample;
#X obj 124 54 r \$0-sampSize;
#X obj 29 158 outlet~;
#N canvas 0 23 785 581 sampLoad 0;
#X obj 305 147 openpanel;
#X obj 305 126 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 305 169 pack s \$0;
#X msg 305 193 read -resize \$1 \$2-sample;
#X obj 305 217 soundfiler;
#X obj 465 49 loadbang;
#X obj 536 48 r reset;
#X msg 533 116 16;
#X obj 533 140 s \$0-bd_rec;
#X obj 489 87 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 301 483 array define \$0-sample;
#X floatatom 305 241 10 0 0 0 - - -;
#X obj 305 264 / 44100;
#X obj 305 288 t b f;
#X msg 305 312 1;
#X obj 305 336 /;
#X floatatom 305 360 5 0 0 0 - - -;
#X obj 305 383 s \$0-pbRate;
#X obj 156 266 - 2;
#X obj 156 290 s \$0-sampSize;
#X msg 424 132 AGTR.aif;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 11 0;
#X connect 5 0 9 0;
#X connect 6 0 9 0;
#X connect 7 0 8 0;
#X connect 9 0 7 0;
#X connect 9 0 20 0;
#X connect 11 0 12 0;
#X connect 11 0 18 0;
#X connect 12 0 13 0;
#X connect 13 0 14 0;
#X connect 13 1 15 1;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 16 0 17 0;
#X connect 18 0 19 0;
#X connect 20 0 2 0;
#X restore 272 29 pd sampLoad;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 4 0 6 0;
#X connect 5 0 2 1;
#X restore 105 36 pd sampPlayer;
#N canvas 0 23 943 524 distortion 0;
#X msg 36 332 \$1 5;
#X obj 36 353 line~;
#X obj 117 447 outlet~;
#X obj 36 310 r \$0-vol_snd;
#X obj 22 199 inlet~;
#X obj 322 383 lop~, f 10;
#X obj 405 383 r \$0-tone_snd;
#X obj 22 232 send~ \$0-signal2distort;
#N canvas 0 23 450 300 sin_distortion 0;
#X obj 108 53 receive~ \$0-signal2distort;
#X obj 173 193 *~, f 21;
#X obj 173 214 outlet~;
#N canvas 0 23 450 300 sin 0;
#X obj 289 125 inlet~;
#X obj 289 219 expr~ sin($V1);
#X obj 289 267 outlet~;
#X obj 289 193 *~, f 12;
#X obj 390 157 inlet;
#X text 285 103 signal to distort;
#X text 389 134 gain;
#X text 30 9 This patch uses the expr~ object to give us the sin function
of the input;
#X text 30 37 This results in any input outside of the -1 --> 1 range
being folded back in to the range;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 3 0 1 0;
#X connect 4 0 3 1;
#X restore 173 172 pd sin;
#X text 3 170 Distortion inside --->;
#X obj 200 113 r \$0-gain_snd;
#X obj 308 67 r \$0-type_snd;
#X obj 331 101 == 2;
#X connect 0 0 3 0;
#X connect 1 0 2 0;
#X connect 3 0 1 0;
#X connect 5 0 3 1;
#X connect 6 0 7 0;
#X connect 7 0 1 1;
#X restore 431 234 pd sin_distortion;
#N canvas 0 23 450 300 wrap_distortion 0;
#N canvas -1280 581 1280 755 wraparaound 0;
#X obj 997 318 expr~ if($v1<-1 \, $v1 \, 0);
#X obj 736 371 expr~ if($v1> 1 \, $v1 \, 0);
#X obj 999 477 *~ -1;
#X obj 471 204 expr~ if($v1>=-1 \, $v1 \, 0);
#X obj 471 275 expr~ if($v1<= 1 \, $v1 \, 0);
#X obj 479 662 outlet~;
#X obj 999 499 expr~ sin($v1);
#X obj 663 42 inlet~;
#X obj 663 110 *~, f 12;
#X obj 764 74 inlet;
#X text 763 51 gain;
#X text 645 17 signal to distort;
#X text 71 14 This example is a bit more complex \, and uses a series
of expr~ objects with "if" statements to take any values between -1
& 1 and output them unchanged;
#X text 142 200 If the input value is greater than or equal to -1 then
output the value \, otherwise output 0;
#X text 124 275 If the input value is less than or equal to 1 then
output the value \, otherwise output 0;
#X text 71 50 Then we say any values that are greater than 1 should
be folded back into the range (using sin) but I multiply the signal
by -1 to invert it's polarity - this means that signals greater than
1 are folded back in from -1;
#X text 70 99 Finally we take signals less than -1 and fold them back
in from 1;
#X text 68 123 (Think PakMan going out the top of the world and coming
back in at the bottom);
#X text 915 476 Flip polarity;
#X text 822 499 Fold input back within range;
#X text 482 367 If the input value is greater than 1;
#X text 478 382 then output the value \, otherwise output 0;
#X text 742 311 If the input value is less than -1;
#X text 738 325 then output the value \, otherwise output 0;
#X text 67 157 REMEMBER: Multiplying signals by 0 gives us silence!
;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 3 0 4 0;
#X connect 4 0 5 0;
#X connect 6 0 5 0;
#X connect 7 0 8 0;
#X connect 8 0 3 0;
#X connect 8 0 0 0;
#X connect 8 0 1 0;
#X connect 9 0 8 1;
#X restore 185 198 pd wraparaound;
#X obj 200 48 receive~ \$0-signal2distort;
#X obj 185 219 *~, f 20;
#X obj 185 240 outlet~;
#X text 47 196 Distortion inside --->;
#X obj 309 70 r \$0-gain_snd;
#X obj 330 146 r \$0-type_snd;
#X obj 353 180 == 3;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X restore 574 231 pd wrap_distortion;
#N canvas 0 23 450 300 tanh-->sin 0;
#N canvas 0 23 425 389 tanh2sin 0;
#X obj 103 50 inlet~;
#X obj 103 165 expr~ tanh($V1);
#X obj 103 270 outlet~;
#X obj 103 186 *~, f 22;
#X obj 242 141 inlet;
#X obj 103 217 expr~ sin($V1);
#X obj 103 71 *~;
#X text 98 30 signal to distort;
#X text 246 121 gain;
#X connect 0 0 6 0;
#X connect 1 0 3 0;
#X connect 3 0 5 0;
#X connect 4 0 3 1;
#X connect 4 0 6 1;
#X connect 5 0 2 0;
#X connect 6 0 1 0;
#X restore 229 157 pd tanh2sin;
#X obj 81 119 receive~ \$0-signal2distort;
#X obj 229 178 *~, f 21;
#X obj 229 199 outlet~;
#X text 56 14 This just takes two previous examples and rund them in
parallel (like a guitarist "stacking" overdrive pedals);
#X obj 241 58 r \$0-gain_snd;
#X obj 317 99 r \$0-type_snd;
#X obj 340 133 == 5;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X restore 787 272 pd tanh-->sin;
#N canvas 0 23 450 300 sin--->tanh 0;
#N canvas 0 23 450 300 sin2tanh 0;
#X obj 37 37 inlet~;
#X obj 37 203 outlet~;
#X obj 37 126 *~, f 22;
#X obj 176 41 inlet;
#X obj 37 105 expr~ sin($V1);
#X obj 37 157 expr~ tanh($V1);
#X text 31 13 signal to distort;
#X text 178 22 gain;
#X obj 37 76 *~, f 16;
#X connect 0 0 8 0;
#X connect 2 0 5 0;
#X connect 3 0 2 1;
#X connect 3 0 8 1;
#X connect 4 0 2 0;
#X connect 5 0 1 0;
#X connect 8 0 4 0;
#X restore 268 209 pd sin2tanh;
#X obj 126 169 receive~ \$0-signal2distort;
#X obj 268 230 *~, f 17;
#X obj 268 251 outlet~;
#X text 56 14 This just takes two previous examples and rund them in
parallel (like a guitarist "stacking" overdrive pedals);
#X obj 280 110 r \$0-gain_snd;
#X obj 350 150 r \$0-type_snd;
#X obj 372 184 == 4;
#X connect 0 0 2 0;
#X connect 1 0 0 0;
#X connect 2 0 3 0;
#X connect 5 0 0 1;
#X connect 6 0 7 0;
#X connect 7 0 2 1;
#X restore 671 258 pd sin--->tanh;
#N canvas 0 23 450 300 bypass 0;
#X obj 161 119 *~;
#X obj 176 97 == 0;
#X obj 53 37 receive~ \$0-signal2distort;
#X obj 161 140 outlet~;
#X obj 175 61 r \$0-type_snd;
#X connect 0 0 3 0;
#X connect 1 0 0 1;
#X connect 2 0 0 0;
#X connect 4 0 1 0;
#X restore 132 310 pd bypass;
#X obj 117 423 *~;
#X text 575 418 sjf \, SAE London \, 2020;
#X obj 717 172 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#N canvas 751 204 590 364 tanh_distortion 0;
#X obj 385 129 == 1;
#N canvas 0 23 747 495 tanh 0;
#X obj 256 173 inlet~;
#X obj 256 450 outlet~;
#X obj 256 227 *~, f 12;
#X obj 325 207 inlet;
#X text 220 153 signal to distort;
#X text 324 184 gain;
#X text 86 226 initial amplification stage;
#X text 353 329 <--- distortion logic;
#X text 30 9 This patch uses the expr~ object to give us the hyperbollic
tangent function of the input;
#X text 31 34 (don't worry \, just look at an example on the internet
to see how the graph of a hyperbollic tangent function compares to
the output of this distortion technique);
#X text 31 72 This approach creates a "soft clipping" style overdrive
;
#X obj 256 331 expr~ tanh($v1);
#X text 320 350 Note: "$v1" is an argument telling the expr~ object
to expect a signal in the first inlet and perform some maths with it
(in this case get the tanh of it);
#X text 320 383 $v2 would imply a signal n a second inlet;
#X text 319 395 $f1 would be a number (float) in the third inlet \,
etc. etc.;
#X connect 0 0 2 0;
#X connect 2 0 11 0;
#X connect 3 0 2 1;
#X connect 11 0 1 0;
#X restore 235 162 pd tanh;
#X obj 143 96 receive~ \$0-signal2distort;
#X obj 235 205 *~;
#X obj 235 226 outlet~;
#X text 54 161 Distortion inside --->;
#X obj 385 106 r \$0-type_snd;
#X obj 229 117 r \$0-gain_snd;
#X connect 0 0 3 1;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 4 0;
#X connect 6 0 0 0;
#X connect 7 0 1 1;
#X restore 266 233 pd tanh_distortion;
#X connect 0 0 1 0;
#X connect 1 0 13 0;
#X connect 3 0 0 0;
#X connect 4 0 7 0;
#X connect 5 0 13 1;
#X connect 6 0 5 1;
#X connect 8 0 5 0;
#X connect 9 0 5 0;
#X connect 10 0 5 0;
#X connect 11 0 5 0;
#X connect 12 0 13 1;
#X connect 13 0 2 0;
#X connect 16 0 5 0;
#X coords 0 524 1 523 180 80 0;
#X restore 110 90 pd distortion;
#X connect 1 0 2 0;
#X connect 2 0 0 0;
#X restore 77 17 pd sampler;
#X obj 90 108 *~ 0.7;
#X floatatom 214 172 5 0 0 0 - - -;
#X connect 0 0 5 0;
#X connect 0 0 10 0;
#X connect 1 0 2 1;
#X connect 2 0 3 0;
#X connect 2 0 4 0;
#X connect 5 0 1 0;
#X connect 8 0 9 0;
#X connect 9 0 2 0;
#X restore 723 58 pd guts;
#X obj 82 173 cnv 15 450 160 empty empty empty 20 12 0 14 -261234 -66577
0;
#X obj 200 260 vradio 10 1 1 6 \$0-type_snd \$0-type_rec clip_type
0 -8 0 10 -166441 -262144 -1 2;
#X text 211 306 tanh --> sin;
#X text 212 296 sin --> tanh;
#X text 210 255 bypass;
#X obj 377 265 vsl 15 50 0 1 0 1 \$0-vol_snd \$0-vol_rec vol 0 -9 0
10 -166441 -262144 -1 4900 1;
#X obj 317 265 vsl 15 50 1 10 1 1 \$0-gain_snd \$0-gain_rec gain 0
-9 0 10 -166441 -262144 -1 2800 1;
#X obj 348 265 vsl 15 50 20 20000 1 1 \$0-tone_snd \$0-tone_rec tone
0 -9 0 10 -166441 -262144 -1 2900 1;
#X text 211 276 sin;
#X text 212 286 wrap;
#X text 102 24 When signals are amplified past the clipping point \,
distortion occurs. Distortion creates harmonics and the process is
dependent on the input signal’s frequency and amplitude.;
#X text 99 173 This example provides a selection of different clipping
algorithms. Each creates different additional content (i.e. clips the
signal differently;
#X text 100 220 The tone control is a LPF placed after the distortion
;
#X text 211 266 tanh;
#X obj 84 87 cnv 15 450 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 103 89 Overdrive / Fuzz / Distortion are all variations on
this basic concept \, providing different harmonic content as a result
of different clipping types;
#X coords 0 -1 1 1 610 390 2 10 10;
